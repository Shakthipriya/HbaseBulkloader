#!/usr/bin/env ruby

require 'rubygems'
require 'stargate'
require 'fileutils'
require 'configliere'
Settings.use :commandline

# USAGE:
#
# bin/monitor --keys_file=<keys_file> --table_name=<table_name> --queries=<num_queries> --output_dir=/mnt/hbase_monitor
#
# OUTPUT:
#
# n_queries_executed, datetime, secs, msec/query, nodename, query_term, missed?
#
Settings.define :keys_file,     :required => true, :description => "Flat file with keys to look up in the first column"
Settings.define :table_name,    :required => true, :description => "HBase table to query"
Settings.define :port,          :default => 8080,  :description => "HBase rest interface port"
Settings.define :offset_start, :default => 50_000,                  :description => "Where to start reading keys", :type => Integer
Settings.define :offset_scale, :default => 100,                     :description => "How far in the keys file to range", :type => Integer
Settings.define :queries,      :default => 10,                      :description => "Number of queries to run",     :type => Integer
Settings.define :output_dir,   :default => nil,                     :description => "If given, the output is directed to a file named :output_dir/{date}/es-{datetime}-{comment}-{hostname}.tsv"
Settings.define :comment,      :default => nil,                     :description => "If given, it is included in the filename"
Settings.resolve!

HOSTNAME = ENV['HOSTNAME'] || `hostname`.chomp
NODENAME = File.read('/etc/node_name').chomp rescue HOSTNAME

client = Stargate::Client.new("http://#{HOSTNAME}:#{Settings.port}")

class Monitor
  attr_accessor :started_at
  def initialize
    self.started_at = Time.now.utc
  end

  def keys_file &block
    File.open(Settings.keys_file, &block)
  end

  def random_offset
    Settings.offset_start + rand(1000)*Settings.offset_scale rescue nil
  end

  def output_file
    return @output_file if @output_file
    return $stdout if Settings.output_dir.blank?
    datehr   = started_at.strftime("%Y%m%d%H")
    datetime = started_at.to_flat
    output_filename = File.expand_path(File.join(Settings.output_dir, datehr,
        ["es", datetime, NODENAME, Settings.comment].compact.join('-')+".tsv"))
    FileUtils.mkdir_p(File.dirname(output_filename))
    @output_file = File.open(output_filename, "a")
  end

  def dump *args
    output_file << args.join("\t")+"\n"
  end

  def each_key &block
    keys_file do |keys_file|
      random_offset.times{ keys_file.readline }
      loop do
        key = keys_file.readline.strip rescue nil
        break unless key
        yield key
      end
    end
  end
end

class Time ; def to_flat() strftime("%Y%m%d%H%M%S"); end ; end
class Array ; def random() self[rand(length)] ; end ; end

monitor = Monitor.new
n_queries_executed = 0
monitor.each_key do |query_key|
  missed = 0
  begin
    result  = client.show_row(Settings.table_name, query_key)
  rescue Stargate::RowNotFoundError => e
    missed = 1 
  end
  elapsed = Time.now.utc - monitor.started_at
  n_queries_executed += 1
  monitor.dump(
    n_queries_executed, Time.now.utc.to_flat, "%7.1f"%elapsed,
    "%7.1f"%( 1000 * elapsed / n_queries_executed.to_f ),
    NODENAME, query_key, missed)
  $stderr.puts(n_queries_executed) if n_queries_executed % 20 == 0
  break if n_queries_executed >= Settings.queries
end
